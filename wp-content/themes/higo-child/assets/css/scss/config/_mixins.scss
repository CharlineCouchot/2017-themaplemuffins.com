// -----------------------------
// <mixins.scss>

// @include clearfix;
@mixin clearfix {
	&:before,
	&:after {
        content: " ";
        display: table;
    }

	&:after {
        clear: both;
    }
}

// @include font-face($style-name, $file, $family, $weight, $style); */
@mixin font-face($style-name, $file, $family, $weight:"", $style:"") {
    $filepath: "assets/fonts/" + $family + "/" + $file;
    @font-face {
        font-family: "#{$style-name}";
        src: url($filepath + ".eot");
        src: url($filepath + ".eot?#iefix") format('embedded-opentype'),
             url($filepath + ".woff") format('woff'),
             url($filepath + ".ttf")  format('truetype'),
             url($filepath + ".svg#" + $style-name + "") format('svg');
        @if $weight != "" {
            font-weight: #{$weight};
        } @else {
            font-weight: normal;
        }
        @if $style != "" {
            font-style: "#{$style}";
        } @else {
            font-style: normal;
        }
    }
}


// @include image-2x(/img/image.png, 100%, auto); */
@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    background-image: url($image);
    background-size: $width $height;
  }
}



@function breakpoint($bp) {
	@if $bp == 'phone' {
    @return '(max-width: #{$phone})';
  }
  @if $bp == 'large-phone' {
    @return '(max-width: #{$large-phone})';
  }
	@if $bp == 'large-phone-landscape' {
    @return '(min-width: #{$phone + 1}) and (max-width: #{$large-phone}) and (orientation:landscape)';
  }
  @else if $bp == 'small' {
    @return '(max-width: #{$small})';
  }
  @else if $bp == 'medium' {
    @return '(max-width: #{$medium})';
  }
  @else if $bp == 'large' {
    @return '(max-width: #{$large})';
  }
  @else if $bp == 'extra-large' {
    @return '(max-width: #{$extra-large})';
  }
  @else if $bp == 'phone-up' {
    @return '(min-width: #{$phone + 1})';
  }
	@else if $bp == 'large-phone-up' {
		@return '(min-width: #{$large-phone + 1})';
	}
  @else if $bp == 'small-up' {
    @return '(min-width: #{$small + 1})';
  }
	@else if $bp == 'small-up-portrait' {
    @return '(min-width: #{$small + 1}) and (orientation:portrait)';
  }
	@else if $bp == 'small-up-landscape' {
    @return '(min-width: #{$small + 1}) and (orientation:landscape)';
  }
  @else if $bp == 'medium-up' {
    @return '(min-width: #{$medium + 1})';
  }
  @else if $bp == 'large-up' {
    @return '(min-width: #{$large + 1})';
  }
  @else if $bp == 'extra-large-up' {
    @return '(min-width: #{$extra-large + 1})';
  }
  @else if $bp == 'retina' {
    @return '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)';
  }
}

@mixin respond-to($value) {
  $string: breakpoint($value);
  @media screen and #{$string} {
    @content;
  }
}


//  @include vertical-gradient {#FFF, #000, 0%, 100%}
@mixin linear-gradient($args...) {
    background-image: -o-linear-gradient($args);
    background-image: -moz-linear-gradient($args);
    background-image: -webkit-linear-gradient($args);
    background-image: linear-gradient($args);
}

@mixin radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}
@mixin transform($transform...) {
    -moz-transform:    $transform;
    -o-transform:      $transform;
    -webkit-transform: $transform;
    transform:         $transform;
}
@mixin transform-origin($transform-origin...) {
    -moz-transform-origin:    $transform-origin;
    -o-transform-origin:      $transform-origin;
    -webkit-transform-origin: $transform-origin;
    transform-origin:         $transform-origin;
}
@mixin transition($transition...) {
    -moz-transition:    $transition;
    -o-transition:      $transition;
    -webkit-transition: $transition;
    transition:         $transition;
}
@mixin transition-property($property...) {
    -moz-transition-property:    $property;
    -o-transition-property:      $property;
    -webkit-transition-property: $property;
    transition-property:         $property;
}
@mixin transition-duration($duration...) {
    -moz-transition-property:    $duration;
    -o-transition-property:      $duration;
    -webkit-transition-property: $duration;
    transition-property:         $duration;
}
@mixin transition-timing-function($timing...) {
    -moz-transition-timing-function:    $timing;
    -o-transition-timing-function:      $timing;
    -webkit-transition-timing-function: $timing;
    transition-timing-function:         $timing;
}
@mixin transition-delay($delay...) {
    -moz-transition-delay:    $delay;
    -o-transition-delay:      $delay;
    -webkit-transition-delay: $delay;
    transition-delay:         $delay;
}

@mixin animation-delay($delay...){
    -webkit-animation-delay:  $delay;
    -moz-animation-delay:     $delay;
    -o-animation-delay:       $delay;
    -ms-animation-delay:      $delay;
    animation-delay:          $delay;
}
@mixin animation($animation...){
    -webkit-animation:  $animation;
    -moz-animation:     $animation;
    -o-animation:       $animation;
    -ms-animation:      $animation;
    animation:          $animation;
}
